{
  "uid" : "599c8f7f534b33f9",
  "name" : "Добавление нового контакта в список менеджера",
  "fullName" : "tests.test_create_contacts.TestCreateContactsPage#test_create_contact_page",
  "historyId" : "a014a10dde751d424ca48a7162eae47e",
  "time" : {
    "start" : 1713293674184,
    "stop" : 1713293679326,
    "duration" : 5142
  },
  "description" : "\n    Цель задачи: gротестировать функциональность добавления новых контактов в систему CRM. \n    Эта функция должна позволять менеджерам по продажам добавлять новых клиентов в список \n    контактов для дальнейшего взаимодействия с ними.",
  "descriptionHtml" : "<pre><code>Цель задачи: gротестировать функциональность добавления новых контактов в систему CRM. \nЭта функция должна позволять менеджерам по продажам добавлять новых клиентов в список \nконтактов для дальнейшего взаимодействия с ними.\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception",
  "statusTrace" : "self = <test_create_contacts.TestCreateContactsPage object at 0x7f946eaed490>\nreset_bd = <function reset_bd.<locals>.reset_bd at 0x7f946f512b60>\n\n    @pytest.mark.regression_tests\n    @allure.testcase('UI-1')\n    @allure.title('Добавление нового контакта в список менеджера')\n    @allure.description('''\n    Цель задачи: gротестировать функциональность добавления новых контактов в систему CRM.\n    Эта функция должна позволять менеджерам по продажам добавлять новых клиентов в список\n    контактов для дальнейшего взаимодействия с ними.''')\n    def test_create_contact_page(self, reset_bd):\n        self.main_page.open_main_page()\n        self.main_page.click_tab_contacts()\n        self.contacts_page.click_btn_new_contact()\n        first_name = self.create_contact_page.enter_first_name()\n        last_name = self.create_contact_page.enter_last_name()\n        title = self.create_contact_page.enter_title()\n        email = self.create_contact_page.enter_email()\n        manager_name = self.create_contact_page.choose_account_manager()\n        expected_full_name = f'{first_name} {last_name}'\n        expected_contact = [expected_full_name, title, email, manager_name]\n        self.create_contact_page.click_btn_save()\n        full_name = self.show_contact_page.extract_full_name_contact()\n        expected_title = self.show_contact_page.extract_title_contact()\n        with allure.step('Проверить, что полное имя созданного контакта соответствует '\n                         'данным введенным при создании контакта'):\n            assert full_name in expected_contact, \\\n                (f\"Show contact page hasn't expected full name: {expected_full_name}.\"\n                 f\"Actual full name: {full_name}.\")\n        with allure.step('Проверить, что title созданного контакта соответствует '\n                         'данным введенным при создании контакта'):\n            assert title in expected_contact, \\\n                (f\"Show contact page hasn't expected title: {title}.\"\n                 f\"Actual title: {expected_title}.\")\n        with allure.step('Проверить, что добавленный контакт отображается в списке контактов'):\n            self.main_page.click_tab_contacts()\n>           list_contacts = self.contacts_page.extract_full_names_contacts()\n\ntests/test_create_contacts.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/contacts_page.py:15: in extract_full_names_contacts\n    return self.extract_names_elements(Locator.FULL_NAMES_CONTACTS)\nbase/base_page.py:107: in extract_names_elements\n    return [element.text for element in elements]\nbase/base_page.py:107: in <listcomp>\n    return [element.text for element in elements]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f946e3f2b70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1713293674183,
      "stop" : 1713293674183,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713293673766,
      "stop" : 1713293673787,
      "duration" : 21
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "reset_bd",
    "time" : {
      "start" : 1713293674183,
      "stop" : 1713293674183,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1713293673787,
      "stop" : 1713293674183,
      "duration" : 396
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n    Цель задачи: gротестировать функциональность добавления новых контактов в систему CRM. \n    Эта функция должна позволять менеджерам по продажам добавлять новых клиентов в список \n    контактов для дальнейшего взаимодействия с ними.",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception",
    "statusTrace" : "self = <test_create_contacts.TestCreateContactsPage object at 0x7f946eaed490>\nreset_bd = <function reset_bd.<locals>.reset_bd at 0x7f946f512b60>\n\n    @pytest.mark.regression_tests\n    @allure.testcase('UI-1')\n    @allure.title('Добавление нового контакта в список менеджера')\n    @allure.description('''\n    Цель задачи: gротестировать функциональность добавления новых контактов в систему CRM.\n    Эта функция должна позволять менеджерам по продажам добавлять новых клиентов в список\n    контактов для дальнейшего взаимодействия с ними.''')\n    def test_create_contact_page(self, reset_bd):\n        self.main_page.open_main_page()\n        self.main_page.click_tab_contacts()\n        self.contacts_page.click_btn_new_contact()\n        first_name = self.create_contact_page.enter_first_name()\n        last_name = self.create_contact_page.enter_last_name()\n        title = self.create_contact_page.enter_title()\n        email = self.create_contact_page.enter_email()\n        manager_name = self.create_contact_page.choose_account_manager()\n        expected_full_name = f'{first_name} {last_name}'\n        expected_contact = [expected_full_name, title, email, manager_name]\n        self.create_contact_page.click_btn_save()\n        full_name = self.show_contact_page.extract_full_name_contact()\n        expected_title = self.show_contact_page.extract_title_contact()\n        with allure.step('Проверить, что полное имя созданного контакта соответствует '\n                         'данным введенным при создании контакта'):\n            assert full_name in expected_contact, \\\n                (f\"Show contact page hasn't expected full name: {expected_full_name}.\"\n                 f\"Actual full name: {full_name}.\")\n        with allure.step('Проверить, что title созданного контакта соответствует '\n                         'данным введенным при создании контакта'):\n            assert title in expected_contact, \\\n                (f\"Show contact page hasn't expected title: {title}.\"\n                 f\"Actual title: {expected_title}.\")\n        with allure.step('Проверить, что добавленный контакт отображается в списке контактов'):\n            self.main_page.click_tab_contacts()\n>           list_contacts = self.contacts_page.extract_full_names_contacts()\n\ntests/test_create_contacts.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/contacts_page.py:15: in extract_full_names_contacts\n    return self.extract_names_elements(Locator.FULL_NAMES_CONTACTS)\nbase/base_page.py:107: in extract_names_elements\n    return [element.text for element in elements]\nbase/base_page.py:107: in <listcomp>\n    return [element.text for element in elements]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f946e3f2b70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException",
    "steps" : [ {
      "name" : "Открыть страницу qa-playground",
      "time" : {
        "start" : 1713293674184,
        "stop" : 1713293676150,
        "duration" : 1966
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Нажать на вкладку CONTACTS",
      "time" : {
        "start" : 1713293676150,
        "stop" : 1713293676302,
        "duration" : 152
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Нажать кнопку NEW CONTACT",
      "time" : {
        "start" : 1713293676302,
        "stop" : 1713293676466,
        "duration" : 164
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле First name валидными данными",
      "time" : {
        "start" : 1713293676466,
        "stop" : 1713293676605,
        "duration" : 139
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле Last name валидными данными",
      "time" : {
        "start" : 1713293676605,
        "stop" : 1713293676768,
        "duration" : 163
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле Title валидными данными",
      "time" : {
        "start" : 1713293676768,
        "stop" : 1713293676974,
        "duration" : 206
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле Email валидными данными",
      "time" : {
        "start" : 1713293676974,
        "stop" : 1713293677189,
        "duration" : 215
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Выбрать аккаунт менеджера из выпадающего списка",
      "time" : {
        "start" : 1713293677189,
        "stop" : 1713293677378,
        "duration" : 189
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Нажать на кнопку SAVE",
      "time" : {
        "start" : 1713293677378,
        "stop" : 1713293677837,
        "duration" : 459
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Получить полное имя контакта",
      "time" : {
        "start" : 1713293677837,
        "stop" : 1713293678381,
        "duration" : 544
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Получить title контакта",
      "time" : {
        "start" : 1713293678381,
        "stop" : 1713293678413,
        "duration" : 32
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Проверить, что полное имя созданного контакта соответствует данным введенным при создании контакта",
      "time" : {
        "start" : 1713293678413,
        "stop" : 1713293678413,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Проверить, что title созданного контакта соответствует данным введенным при создании контакта",
      "time" : {
        "start" : 1713293678413,
        "stop" : 1713293678413,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Проверить, что добавленный контакт отображается в списке контактов",
      "time" : {
        "start" : 1713293678413,
        "stop" : 1713293679325,
        "duration" : 912
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n",
      "statusTrace" : "  File \"/usr/workspace/tests/test_create_contacts.py\", line 41, in test_create_contact_page\n    list_contacts = self.contacts_page.extract_full_names_contacts()\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/contacts_page.py\", line 15, in extract_full_names_contacts\n    return self.extract_names_elements(Locator.FULL_NAMES_CONTACTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/workspace/base/base_page.py\", line 107, in extract_names_elements\n    return [element.text for element in elements]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/workspace/base/base_page.py\", line 107, in <listcomp>\n    return [element.text for element in elements]\n            ^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 90, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "Нажать на вкладку CONTACTS",
        "time" : {
          "start" : 1713293678413,
          "stop" : 1713293678663,
          "duration" : 250
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : false
      }, {
        "name" : "Получить список полных имен из списка контактов менеджера",
        "time" : {
          "start" : 1713293678663,
          "stop" : 1713293679324,
          "duration" : 661
        },
        "status" : "broken",
        "statusMessage" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n",
        "statusTrace" : "  File \"/usr/workspace/pages/contacts_page.py\", line 15, in extract_full_names_contacts\n    return self.extract_names_elements(Locator.FULL_NAMES_CONTACTS)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/workspace/base/base_page.py\", line 107, in extract_names_elements\n    return [element.text for element in elements]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/workspace/base/base_page.py\", line 107, in <listcomp>\n    return [element.text for element in elements]\n            ^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 90, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 2,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 16,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "reset_bd::0",
    "time" : {
      "start" : 1713293679380,
      "stop" : 1713293679380,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver::0",
    "time" : {
      "start" : 1713293679380,
      "stop" : 1713293679465,
      "duration" : 85
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "regression_tests"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_create_contacts"
  }, {
    "name" : "subSuite",
    "value" : "TestCreateContactsPage"
  }, {
    "name" : "host",
    "value" : "a86c27c30bfe"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_create_contacts"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "UI-1",
    "url" : "UI-1",
    "type" : "tms"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "cc7a00465b6f3cdf",
        "status" : "passed",
        "time" : {
          "start" : 1712346044396,
          "stop" : 1712346049360,
          "duration" : 4964
        }
      }, {
        "uid" : "1de1b312e8efe51d",
        "status" : "passed",
        "time" : {
          "start" : 1712315962391,
          "stop" : 1712315966821,
          "duration" : 4430
        }
      } ]
    },
    "tags" : [ "regression_tests" ]
  },
  "source" : "599c8f7f534b33f9.json",
  "parameterValues" : [ ]
}